[{"content":"This is the journey of how I successfully bypassed Wordfence WAF to exploit a SQL Injection in an updated WordPress and Wordfence. The vulnerability was present in a custom plugin developed for my client by a 3rd party. In this post I will explain how I discovered the vulnerability and how I exploited it, successfully bypassing Wordfence SQLi security measures. All the code used in this post can be found at the end of the post. For obvious reasons I will not share the client\u0026rsquo;s website or vulnerable code, instead I developed a simple lab with Docker.\nDisclaimer: This post is for educational purposes only. The research was done in a legal engagement for my client. Please do not use this information for illegal activities.\nFinding the SQL Injection My methodology to find SQL Injections is very simple: crawl the site, do fuzzing, and manually inspect the site, always sending the requests through Burp Suite. Then I look for all parameterized requests. After doing all that I used a very good Burp Suite Pro Extension I always use to scan for injections, Backslash Powered Scanner. This extension reported the SQL Injection in a GET parameter.\nAfter manually inspecting the vulnerability with Repeater I found it was a Boolean-Based Blind SQL Injection.\nWordfence Bypass Once I found the vulnerability I immediately reported it to my client. My client didn\u0026rsquo;t know if this was a very urgent vulnerability to solve, as Wordfence was in place. He said to me that if this vulnerability couldn\u0026rsquo;t be exploited it was not that big of a deal. I told him that I would try to bypass the WAF in a controlled environment and if I was successful I would then try to exploit it in the real WordPress.\nVulnerable Lab I set up a fresh latest WordPress with Docker and installed the Wordfence Plugin (Free license, same as my client) and a vulnerable custom plugin simulating the real vulnerability. This is the docker-compose.yml file I used:\nservices: db: image: MariaDB:10.11 container_name: wf_db restart: always environment: MYSQL_ROOT_PASSWORD: rootpass MYSQL_DATABASE: wordpress MYSQL_USER: wpuser MYSQL_PASSWORD: wppass command: --default-authentication-plugin=mysql_native_password volumes: - wf_db_data:/var/lib/mysql wordpress: image: wordpress:latest container_name: wf_wp restart: always depends_on: - db ports: - \u0026#34;127.0.0.1:80:80\u0026#34; environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wpuser WORDPRESS_DB_PASSWORD: wppass WORDPRESS_DB_NAME: wordpress volumes: - ./html:/var/www/html volumes: wf_db_data: Vulnerable Code The vulnerable plugin code is as follows:\nFiles: vulnerable-plugin.php:\n\u0026lt;?php /* Plugin Name: Vulnerable Plugin Description: Intentionally vulnerable SQL injection endpoint for pentesting practice. Version: 1.0 Author: You */ add_action(\u0026#39;init\u0026#39;, function () { if (isset($_GET[\u0026#39;vuln_test\u0026#39;])) { include plugin_dir_path(__FILE__) . \u0026#39;vuln-endpoint.php\u0026#39;; exit; } }); vuln-endpoint.php:\n\u0026lt;?php // Local lab only! Insecure by design. $mysqli = new mysqli(\u0026#34;db\u0026#34;, \u0026#34;wpuser\u0026#34;, \u0026#34;wppass\u0026#34;, \u0026#34;wordpress\u0026#34;); if ($mysqli-\u0026gt;connect_errno) { die(\u0026#34;Failed to connect: \u0026#34; . $mysqli-\u0026gt;connect_error); } $id = $_GET[\u0026#39;id\u0026#39;]; // Necessary to reproduce real WP behaviour $id = str_replace(\u0026#39;\\\\\u0026#39;, \u0026#39;\u0026#39;, $id); // ⚠ Intentionally UNSAFE query — vulnerable to boolean-based injection $query = \u0026#34;SELECT * FROM wp_vuln_users WHERE id = $id\u0026#34;; $result = $mysqli-\u0026gt;query($query); if ($result) { while ($row = $result-\u0026gt;fetch_assoc()) { echo \u0026#34;ID: {$row[\u0026#39;id\u0026#39;]} | User: {$row[\u0026#39;username\u0026#39;]} | Email: {$row[\u0026#39;email\u0026#39;]}\u0026lt;br\u0026gt;\u0026#34;; } } else { echo \u0026#34;Query failed: \u0026#34; . $mysqli-\u0026gt;error; } I tried SQLMap with different tampers and Ghauri to see how good Wordfence was doing with these complex payloads, and all were being blocked.\nI then moved to manual testing, seeing which kind of rules it was using. I tried obfuscation, strange functions, JSON encoding, but nothing worked.\nI started testing MariaDB functions to see if there were any blacklisted words or characters and, to my surprise, there weren’t. In fact, I discovered that Wordfence only blocks payloads that have a high heuristic probability of being a SQL statement. What I mean is that a complex SQL query like the ones SQLMap or Ghauri were sending were being blocked, but a simple ?id=3 AND ASCII(SUBSTRING(database(),1,1)) \u0026gt; 114 worked.\nKnowing this I could start enumerating the database using the SUBSTRING function and improving efficiency by using the ASCII function, which transforms a single character into its ASCII number representation. As I now found a viable way to enumerate the database, I started testing for working payloads to:\nGet the length of the string I was going to dump Get current database name Get table names Get column names Dump rows All of this was done using binary search to be as efficient as possible, as SQL allows you to compare if a value is lower or greater than another.\nWorking Payloads To dump table names, column names, and row data I used the function GROUP_CONCAT, which allows doing an inferred SELECT of the fields it will retrieve, concatenating all in a large string separated by ,. I could only do it this way because all other payloads containing more than 1 FROM were being blocked.\nI needed to know which values were which (as all the retrieved fields are concatenated together without any separation), so I simply added a | in the GROUP_CONCAT function: SELECT GROUP_CONCAT(column_name,'|',table_name) FROM information_schema.columns.\n1. String Length Database 3 AND LENGTH(database()) \u0026gt; 50000\nTables 3 AND LENGTH((SELECT GROUP_CONCAT(table_name,'|',table_schema) FROM information_schema.tables)) \u0026gt; 3850\nColumns 3 AND LENGTH((SELECT GROUP_CONCAT(column_name,'|',table_name) FROM information_schema.columns)) \u0026gt; 50000\nData 3 AND LENGTH((SELECT GROUP_CONCAT(id,'|',user_login,'|',user_pass) from wordpress.wp_users)) \u0026gt; 142\n2. Database Name 3 AND ASCII(SUBSTRING(database(),1,1)) \u0026gt; 114\n3. Table Names 3 AND ASCII(SUBSTRING((SELECT GROUP_CONCAT(table_name,'|',table_schema) FROM information_schema.tables),2916,1)) \u0026gt; 113\nThe GROUP_CONCAT method was viable, but not optimal, as I couldn\u0026rsquo;t filter for the table names from the database I wanted. The result of this was the retrieval of all MariaDB table names, wasting a ton of requests on data I didn’t really care about.\nTo solve this issue I started investigating how to retrieve only the table names from the database wordpress. I noticed that the MariaDB table names always come first, so I calculated the length of the string of all MariaDB table names and started the SUBSTRING function after that. This method can fail in different versions of MariaDB or might not work in MySQL, but it worked perfectly in my client\u0026rsquo;s database.\nThe real length is 2910, so I started the substring in 2911.\nNOTE: this length count has to be done with the DB user of WordPress which has only permissions to see information_schema and performance_schema apart from the wordpress database.\n4. Column Names 3 AND ASCII(SUBSTRING((SELECT GROUP_CONCAT(column_name,'|',table_name) FROM information_schema.columns),22262,1)) \u0026gt; 106\nFor the column names I followed the same methodology, starting the SUBSTRING function after all MariaDB column names. The real lenght is 22258, so I started in 22259.\n5. Data Dump 3 AND ASCII(SUBSTRING((SELECT GROUP_CONCAT(id,'|',user_login,'|',user_pass) from wordpress.wp_users),10,1)) \u0026gt; 118\nPython Script After testing all working payloads I developed a Python script that could dump the database. The script has the following features:\nBinary search in all dumping scenarios Threads (with queues) for each substring position for a faster dump Usage of parameters to specify the dumping scenario (database, table names, column names, dump rows), URL and string that evaluates payload to TRUE Resume option Output to file option Proxy support Evaluates to true searching for a specific string The script is not perfect, it could be improved by:\nAdding POST requests support Reading Burp Requests specifying the vulnerable parameter with * Improving data representation Specifying payload via parameter instead of modifying code Supporting other evaluation strategies (string not present, status code, etc.) Dumping the vulnerable Docker Wordpress Database Tables Columns Data If no DB is specified it automatically retrieves it.\nThe full script code can be found in this Github Gist.\nResults After adapting the script for the payload and parameters of my client\u0026rsquo;s WordPress I was able to bypass Wordfence and dump the database. I only dumped the database name and the user_login and user_pass fields from the wp_users table to demonstrate this was a big security issue.\nAfter showing it to my client he immediately created a task to solve this issue ASAP.\nThis proved two important things: first, that relying only on Wordfence or any WAF is not enough to stop determined attackers; and second, that insecure custom plugins are often the real weak point even if WordPress and security plugins are fully updated. The key lesson is that every line of code handling user input must be validated and secured at the application level, because WAFs should be seen only as an additional layer, not a replacement for secure coding.\nConclusion Bypassing Wordfence in this case showed me that relying only on a WAF is never enough. Even with WordPress fully updated and Wordfence running, a custom insecure plugin opened the door to a full SQL injection exploit. The protection Wordfence provided was useful against common tools and noisy payloads, but a determined attacker with manual testing could still go through.\nThe real takeaway is that security has to be built into the code itself. Every custom plugin or feature that handles user input must be carefully validated and use prepared statements. WAFs should only be seen as an extra line of defense, not the main one.\nFor me, this research was another reminder that real security work is about understanding how protections actually behave in practice, not how they are marketed. It also reinforced the importance of reporting responsibly and testing in controlled environments.\n","permalink":"https://emc2hf.github.io/blog/2025/08/17/how-i-successfully-bypassed-wordfence-to-exploit-sqli-in-a-clients-wordpress/","summary":"\u003cp\u003eThis is the journey of how I successfully bypassed Wordfence WAF to exploit a SQL Injection in an updated WordPress and Wordfence. The vulnerability was present in a custom plugin developed for my client by a 3rd party. In this post I will explain how I discovered the vulnerability and how I exploited it, successfully bypassing Wordfence SQLi security measures. All the code used in this post can be found at the end of the post. For obvious reasons I will not share the client\u0026rsquo;s website or vulnerable code, instead I developed a simple lab with \u003ccode\u003eDocker\u003c/code\u003e.\u003c/p\u003e","title":"How I Successfully Bypassed Wordfence to Exploit SQLi in a Client's WordPress"},{"content":"Content license All non-code blog content is licensed under Creative Commons BY-NC-SA.\nCode license All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.\nCopyright 2018 Leon Jacobs Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ","permalink":"https://emc2hf.github.io/license/","summary":"\u003ch3 id=\"content-license\"\u003eContent license\u003c/h3\u003e\n\u003cp\u003eAll non-code blog content is licensed under \u003ca href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/\"\u003eCreative Commons BY-NC-SA\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"code-license\"\u003eCode license\u003c/h3\u003e\n\u003cp\u003eAll source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCopyright 2018 Leon Jacobs\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLicensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyou may not use this file except in compliance with the License.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eYou may obtain a copy of the License at\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   http://www.apache.org/licenses/LICENSE-2.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUnless required by applicable law or agreed to in writing, software\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edistributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSee the License for the specific language governing permissions and\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elimitations under the License.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"license"},{"content":" Hi, I’m Pol Sarís, a 25-year-old cybersecurity enthusiast from Girona, Spain. I graduated in Computer Engineering and worked as a DevOps engineer for 2 years, where I gained strong experience in Linux systems, automation, and cloud technologies.\nFor the past 4 years, I’ve been dedicated to learning and practicing red teaming through CTFs, labs, and courses. I have recently started doing Bug Bounty Hunting. I recently obtained the HackTheBox CPTS certification and I’m currently preparing for OSCP.\nI’m actively seeking opportunities as a junior penetration tester and I’m always open to connecting with like-minded professionals.\nBadges HTB CPTS Computer Engeneer UdG Social Github Medium You can contact me via email to emc2hfpublic@gmail.com Twitter \u0026lt;= (Not very active) How did I get into Red Team? My story is the opposite of most hackers, who started hacking at a very young age, first with video games or their parents’ computer, and then evolving into real hacking. I have been involved with computers since I was 5, but never for hacking, only to play video games. I have always been the tech guy in my house, but I had never done anything related to cybersecurity. I enrolled in Computer Engineering simply because I liked computers, nothing more.\nI discovered hacking at the end of my 3rd year of Computer Engineering, with 1 year left before graduation. I had always been good at studying, with little effort, I usually passed with good grades in math and science. I didn’t care much before, but as you grow up and realize your studies are coming to an end and your career choices will shape the rest of your life, it was time to make a decision. I enjoyed Computer Engineering, I found it fascinating and I was enjoying the learning process, but I didn’t see myself as a programmer or a system administrator or any of the other typicall jobs everybody chooses.\nThen one day, I saw in the news the arrest of a Spanish hacker, and I became curious. (I had always wondered how hacking really worked, but I had never looked into it.) I started researching and discovered that you could work as an ethical hacker, simulating real-world attacks to find security flaws and help companies improve their security. I began watching hacking videos, programming very simple malware I found on YouTube and testing it myself, getting into easy CTFs, and I loved it. Since that moment, I knew this was what I wanted to do for a living. I have been learning ethical hacking through self-study since 2021, combining it with work and university, and practicing every day I can.\n","permalink":"https://emc2hf.github.io/about/","summary":"\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"/images/profile.png\" width=\"100px\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eHi, I’m Pol Sarís, a 25-year-old cybersecurity enthusiast from Girona, Spain. I graduated in Computer Engineering and worked as a DevOps engineer for 2 years, where I gained strong experience in Linux systems, automation, and cloud technologies.\u003c/p\u003e\n\u003cp\u003eFor the past 4 years, I’ve been dedicated to learning and practicing red teaming through CTFs, labs, and courses. I have recently started doing Bug Bounty Hunting. I recently obtained the HackTheBox CPTS certification and I’m currently preparing for OSCP.\u003c/p\u003e","title":"About Me"}]